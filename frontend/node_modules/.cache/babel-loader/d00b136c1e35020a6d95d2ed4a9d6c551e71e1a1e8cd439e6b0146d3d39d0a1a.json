{"ast":null,"code":"var _jsxFileName = \"/Users/sebasmorante/Documents/Q7/pti-pro/frontend/src/components/Payments/BlockchainPayment.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { sendPayment } from '../../services/Payment';\nimport '../Styles/BlockchainPayment.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DESTINATARIO_PAGO = \"0x2b41659B028269Fe71E6683c7240294cdD9607e1\";\nconst BlockchainPayment = ({\n  costeTotal,\n  onClose,\n  onCancelPayment\n}) => {\n  _s();\n  const [account, setAccount] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const amount = costeTotal;\n  const recipient = `${DESTINATARIO_PAGO}`;\n  useEffect(() => {\n    const checkMetaMaskConnection = async () => {\n      if (typeof window.ethereum != 'undefined') {\n        try {\n          const accounts = await window.ethereum.request({\n            method: 'eth_requestAccounts'\n          });\n          setAccount(accounts[0]);\n        } catch (error) {\n          console.error(\"Error al conectarse a MetaMask\", error);\n          setErrorMessage(\"Fallo al conectarse a MetaMask. Comprueba si esta instalado y desbloqueado\");\n        }\n      } else {\n        setErrorMessage(\"MetaMask no esta instalado. Intalalo para poder pagar.\");\n      }\n    };\n    checkMetaMaskConnection();\n  }, []);\n  const handlePayment = async e => {\n    e.preventDefault();\n    setLoading(true);\n    setErrorMessage('');\n    setSuccessMessage('');\n    console.log(\"Iniciando el proceso de pago...\");\n    try {\n      if (!window.ethereum) throw new Error(\"MetaMask no esta instalado\");\n      const message = `Pay ${amount} UPCoin to ${recipient}`;\n      const signature = await window.ethereum.request({\n        method: 'personal_sign',\n        params: [message, account]\n      });\n      const paymentData = {\n        signature,\n        from: account,\n        to: recipient,\n        amount: amount * 10 ** 2\n      };\n      const response = await fetch('http://localhost:3001/relay-transfer', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(paymentData)\n      });\n      const data = await response.json();\n      setSuccessMessage(data.message);\n      console.log(\"Pago exitoso:\", data.message);\n    } catch (error) {\n      console.error(error);\n      setErrorMessage(error || 'Ha ocurrido un error durante el pago');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blockchain-payment\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Blockchain Payment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), account ? /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"txt\",\n      children: [\"Cuenta conectada: \", account]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Porfavor conecta tu cuenta de MetaMask wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 80\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handlePayment,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"txt\",\n          children: [\"Total a pagar: \", amount, \" UPCoin\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"txt\",\n          children: [\"Destinatario del pago: \", recipient]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"pay\",\n        type: \"submit\",\n        disabled: !account || loading,\n        children: loading ? 'Procesando...' : 'Firma el Pago'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"cancel\",\n        type: \"button\",\n        onClick: () => {\n          onClose();\n          onCancelPayment();\n        },\n        children: \"Cancelar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"errorMessage\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 30\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"successMessage\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(BlockchainPayment, \"MYtvdJhl53b2UKgwUWB4HrDmRjw=\");\n_c = BlockchainPayment;\nexport default BlockchainPayment;\nvar _c;\n$RefreshReg$(_c, \"BlockchainPayment\");","map":{"version":3,"names":["React","useState","useEffect","sendPayment","jsxDEV","_jsxDEV","DESTINATARIO_PAGO","BlockchainPayment","costeTotal","onClose","onCancelPayment","_s","account","setAccount","loading","setLoading","errorMessage","setErrorMessage","successMessage","setSuccessMessage","amount","recipient","checkMetaMaskConnection","window","ethereum","accounts","request","method","error","console","handlePayment","e","preventDefault","log","Error","message","signature","params","paymentData","from","to","response","fetch","headers","body","JSON","stringify","data","json","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/sebasmorante/Documents/Q7/pti-pro/frontend/src/components/Payments/BlockchainPayment.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { sendPayment } from '../../services/Payment';\nimport '../Styles/BlockchainPayment.css';\n\nconst DESTINATARIO_PAGO = \"0x2b41659B028269Fe71E6683c7240294cdD9607e1\";\n\nconst BlockchainPayment = ({costeTotal, onClose, onCancelPayment}) => {\n    const [account, setAccount] = useState('');\n\n    const [loading , setLoading] = useState(false);\n    const [errorMessage , setErrorMessage] = useState('');\n    const [successMessage , setSuccessMessage] = useState('');\n\n    const amount = costeTotal;\n    const recipient = `${DESTINATARIO_PAGO}`;\n\n    useEffect(() => {\n        const checkMetaMaskConnection = async () => {\n            if (typeof window.ethereum != 'undefined') {\n                try {\n                    const accounts = await window.ethereum.request({method:'eth_requestAccounts'});\n                    setAccount(accounts[0]);\n                } catch (error) {\n                    console.error(\"Error al conectarse a MetaMask\", error);\n                    setErrorMessage(\"Fallo al conectarse a MetaMask. Comprueba si esta instalado y desbloqueado\");\n                }\n            } else {\n                setErrorMessage(\"MetaMask no esta instalado. Intalalo para poder pagar.\");\n            }\n        };\n\n        checkMetaMaskConnection();\n    }, []);\n\n    const handlePayment = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setErrorMessage('');\n        setSuccessMessage('');\n        console.log(\"Iniciando el proceso de pago...\");\n    \n\n        try {\n            if (!window.ethereum) throw new Error (\"MetaMask no esta instalado\");\n\n            const message = `Pay ${amount} UPCoin to ${recipient}`;\n\n            const signature = await window.ethereum.request({method: 'personal_sign', params: [message, account]});\n\n            const paymentData = {\n                signature,\n                from: account,\n                to: recipient,\n                amount: amount * (10 ** 2)\n            };\n\n            const response = await fetch('http://localhost:3001/relay-transfer', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(paymentData),\n            });\n    \n            const data = await response.json();\n            setSuccessMessage(data.message);\n            console.log(\"Pago exitoso:\", data.message);\n\n        } catch (error) {\n            console.error(error);\n            setErrorMessage(error || 'Ha ocurrido un error durante el pago')\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div className='blockchain-payment'>\n            <h2>Blockchain Payment</h2>\n            {account ? (<p className='txt'>Cuenta conectada: {account}</p>) : (<p>Porfavor conecta tu cuenta de MetaMask wallet</p>)}\n            <form onSubmit={handlePayment}>\n                <div>\n                    <p className='txt'>Total a pagar: {amount} UPCoin</p>\n                    <p className='txt'>Destinatario del pago: {recipient}</p>\n                </div>\n                <button className='pay' type='submit' disabled={!account || loading}>\n                    {loading ? 'Procesando...' : 'Firma el Pago'}\n                </button>\n                <button className='cancel' type=\"button\" onClick={() => {onClose(); onCancelPayment();}}>Cancelar</button>\n            </form>\n            {errorMessage && <p className='errorMessage'>{errorMessage}</p>}\n            {successMessage && <p className='successMessage'>{successMessage}</p>}\n        </div>\n    );\n};\n\nexport default BlockchainPayment;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}